//
//  CoinPresenter.swift
//  MarketCoins
//
//  Created by Juliano Sgarbossa on 14/05/25.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CoinPresentationLogic {
    func presentCoin(response: Coin.FetchCurrentData.Response)
    func presentMarkChart(response: [Coin.FetchMarketChart.Response])
    func presentError(error: CryptocurrenciesError)
}

class CoinPresenter: CoinPresentationLogic {
    
    weak var viewController: CoinDisplayLogic?
    
    // MARK: Do something
    func presentCoin(response: Coin.FetchCurrentData.Response) {
        let viewModel = Coin.FetchCurrentData.ViewModel(currentPrice: response.currentPrice.toCurrency(coin: response.baseCoin),
                                                        priceChangePercentage: response.priceChangePercentage.toPercentage(),
                                                        coinPrice: 1.toCurrency(coin: response.baseCoin),
                                                        coinName: <#T##String#>,
                                                        coinSymbol: response.coinSymbol.uppercased(),
                                                        coinImage: response.coinImage,
                                                        currentPriceComparationToCoin: response.currentPriceComparationToCoin.toCurrency(coin: response.baseCoin),
                                                        comparationToCoinSymbol: response.comparationToCoinSymbol.uppercased(),
                                                        priceChangePercentageOneDay: response.priceChangePercentageOneDay.toPercentage(),
                                                        priceChangePercentageOneWeek: response.priceChangePercentageOneWeek.toPercentage(),
                                                        priceChangePercentageTwoWeeks: response.priceChangePercentageTwoWeeks.toPercentage(),
                                                        priceChangePercentageOneMonth: response.priceChangePercentageOneMonth.toPercentage(),
                                                        priceChangePercentageTwoMonths: response.priceChangePercentageTwoMonths.toPercentage(),
                                                        priceChangePercentageOneYear: response.priceChangePercentageOneYear.toPercentage(),
                                                        marketCapRank: "#\(response.marketCapRank)",
                                                        marketCap: response.marketCap.toCurrency(coin: response.baseCoin),
                                                        fullyDilutedValuation: response.fullyDilutedValuation.toCurrency(coin: response.baseCoin),
                                                        totalVolume: <#T##String#>,
                                                        high24h: <#T##String#>,
                                                        low24h: <#T##String#>,
                                                        supplyAvailable: <#T##String#>,
                                                        totalSupply: <#T##String#>,
                                                        maxSupply: <#T##String#>,
                                                        maximumValue: <#T##String#>,
                                                        maximumValuePercentege: <#T##String#>,
                                                        maximumValueDate: <#T##String#>,
                                                        minimumValue: <#T##String#>,
                                                        minimumValuePercentege: <#T##String#>,
                                                        minimumValueDate: <#T##String#>)
    }
    
    func presentMarkChart(response: [Coin.FetchMarketChart.Response]) {
        <#code#>
    }
    
    func presentError(error: CryptocurrenciesError) {
        
    }
}
